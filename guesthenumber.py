#Python 3.8
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command,CommandStart, BaseFilter
from aiogram.types import Message, ContentType, PhotoSize
import os
from datetime import datetime
from dotenv import load_dotenv
import random
import time
from typing import List,Union,Dict,Any

# pyright: reportOptionalMemberAccess=false
# pyright: reportArgumentType=false
load_dotenv('vars.env') #–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫–ª—é—á–µ–π –±–æ—Ç–∞
dotenv_path = os.getenv('BOT_KEYS_PLACE')
load_dotenv(dotenv_path)
bot_token = os.getenv('WARSHIPS_BOT')
if bot_token is not None:
    print('Key was found')
else:
    print('Key not found')
    exit()

bot  = Bot(token=bot_token)
dp = Dispatcher()

admins_id = [790161259]

users = {}

user = {
    'in_game' : False,
    'secret_number': None,
    'attempts':None,
    'total_games':0,
    'wins':0
}

ATTEMPTS = 5

class IsAdmin(BaseFilter):
    def __init__(self,adm_ids: List[int]) -> None:
       self.adm_lst = adm_ids
    async def __call__(self,message: Message) -> Union[bool ,Dict[str,int]]:
        return {'status' : 1 if message.from_user.id in self.adm_lst else 0}

class FindDigits(BaseFilter):
    async def __call__(self, message: Message) -> Union[bool ,Dict[str,List[int]]]:
        numbers = []
        for word in message.text.replace(',',' ').split(' '):
            correct_word = word.strip(' ').replace('.','')
            if correct_word.isdigit():
                numbers.append(int(correct_word))
        if numbers:
            return {'numbers' : numbers}
        else:
            return False

def random_nimber() -> int:
    return random.randint(1,100)

@dp.message(IsAdmin(admins_id),Command(commands=["botstat"]))
async def answer_admin_message(message: Message, status: int):
    if status == 1:
        await message.answer(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞(–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º):\n{users}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}')
    else:
        await message.answer(f'–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')


@dp.message(lambda msg: msg.text and msg.text == '/start')
async def process_start_command(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"?\n\n'
        '–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö '
        '–∫–æ–º–∞–Ω–¥ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.\n'
        '–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.\n'
        '–Ø –º–æ–≥—É –∏—Å–∫–∞—Ç—å —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.\n–ù–∞–ø–∏—à–∏ "–Ω–∞–π–¥–∏ —á–∏—Å–ª–æ" –∏ —è –Ω–∞–π–¥—É —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ')
    await bot.send_animation(message.chat.id,'CgACAgQAAxkBAAIGsGiuhhXWenc9PERVPZmQGiUY2xX6AAI7CQAC9tN1UV7GrXr_nOnyNgQ')
    if message.from_user.id not in users:
        users[message.from_user.id] = user
    print(users)

@dp.message(Command(commands=["help"]))
async def process_help_command(message: Message):
    await message.answer( '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, '
        f'–∞ –≤–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ —É–≥–∞–¥–∞—Ç—å\n–£ –≤–∞—Å –µ—Å—Ç—å {ATTEMPTS} '
        '–ø–æ–ø—ã—Ç–æ–∫\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ø—Ä–∞–≤–∏–ª–∞ '
        '–∏–≥—Ä—ã –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/cancel - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã\n'
        '/stat - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n/botstat - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ(–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n/off - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞(–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)\n\n–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º?')


@dp.message(Command(commands=["stat"]))
async def process_stat_command(message: Message):
    await message.answer( f'–í—Å–µ–≥–æ –∏–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user["total_games"]}\n'
        f'–ò–≥—Ä –≤—ã–∏–≥—Ä–∞–Ω–æ: {user["wins"]}')

@dp.message(Command(commands=["cancel"]))
async def process_cancel_command(message: Message):
    if users[message.from_user.id]['in_game']:
        users[message.from_user.id]['in_game'] = False
        await message.answer(
        '–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å '
        '—Å–Ω–æ–≤–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º'
        )
    else:
        await message.answer(
        '–ê –º—ã –∏ —Ç–∞–∫ —Å –≤–∞–º–∏ –Ω–µ –∏–≥—Ä–∞–µ–º. '
        '–ú–æ–∂–µ—Ç, —Å—ã–≥—Ä–∞–µ–º —Ä–∞–∑–æ–∫?'
        )

@dp.message(F.photo[-1].as_('photo_max'),F.photo[0].as_('photo_min'))
async def process_photo_send(message: Message, photo_max: PhotoSize, photo_min: PhotoSize):
    print(photo_max)
    print(photo_min)
    await message.answer(f'Photo low quality info:\nfile_id={photo_min.file_id}\nfile_unique_id={photo_min.file_unique_id}\nfile_size={photo_min.file_size}\nresolution= {photo_min.width}x{photo_min.height}\nPhoto high quality info:\nfile_id={photo_max.file_id}\nfile_unique_id={photo_max.file_unique_id}\nfile_size={photo_max.file_size}\nresolution= {photo_max.width}x{photo_max.height}')

@dp.message(F.text.lower().startswith('–Ω–∞–π–¥–∏ —á–∏—Å–ª–∞'), FindDigits())
async def search_digits_was_find(message: Message, numbers: List[int]):
    await message.answer(f'–ß–∏—Å–ª–∞ –Ω–∞–π–¥–µ–Ω—ã!\n–ò—Ö —Å–ø–∏—Å–æ–∫: {numbers}.\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª: {len(numbers)}.')

@dp.message(F.text.lower().startswith('–Ω–∞–π–¥–∏ —á–∏—Å–ª–∞'))
async def search_digits_wasnt_find(message: Message):
    await message.answer(f'–ß–∏—Å–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üëç') #–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏ –ª–∞–π–∫

@dp.message(F.text.lower().in_(['–¥–∞', '–¥–∞–≤–∞–π', '—Å—ã–≥—Ä–∞–µ–º', '–∏–≥—Ä–∞',
                                '–∏–≥—Ä–∞—Ç—å', '—Ö–æ—á—É –∏–≥—Ä–∞—Ç—å']))
async def process_positive_answer(message: Message):
    if not users[message.from_user.id]['in_game']:
        users[message.from_user.id]['in_game'] = True
        users[message.from_user.id]['secret_number'] = random_nimber()
        users[message.from_user.id]['attempts'] = ATTEMPTS
        await message.answer(
            '–£—Ä–∞!\n\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, '
            '–ø–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!'
        )
    else:
        await message.answer(
            '–ü–æ–∫–∞ –º—ã –∏–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É —è –º–æ–≥—É '
            '—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100 '
            '–∏ –∫–æ–º–∞–Ω–¥—ã /cancel –∏ /stat'
        )

@dp.message(F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ', '–Ω–µ —Ö–æ—á—É', '–Ω–µ –±—É–¥—É']))
async def process_negative_answer(message: Message):
    if not users[message.from_user.id]['in_game']:
        await message.answer(
            '–ñ–∞–ª—å :(\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å - –ø—Ä–æ—Å—Ç–æ '
            '–Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º'
        )
    else:
        await message.answer(
            '–ú—ã –∂–µ —Å–µ–π—á–∞—Å —Å –≤–∞–º–∏ –∏–≥—Ä–∞–µ–º. –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ, '
            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100'
        )

@dp.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def process_numbers_answer(message: Message):
    if users[message.from_user.id]['in_game']:
        if int(message.text) == users[message.from_user.id]['secret_number']:
            users[message.from_user.id]['in_game'] = False
            users[message.from_user.id]['total_games'] += 1
            users[message.from_user.id]['wins'] += 1
            await message.answer(
                '–£—Ä–∞!!! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!\n\n'
                '–ú–æ–∂–µ—Ç, —Å—ã–≥—Ä–∞–µ–º –µ—â–µ?'
            )
        elif int(message.text) > users[message.from_user.id]['secret_number']:
            users[message.from_user.id]['attempts'] -= 1
            await message.answer('–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ')
        elif int(message.text) < users[message.from_user.id]['secret_number']:
            users[message.from_user.id]['attempts'] -= 1
            await message.answer('–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ')

        if users[message.from_user.id]['attempts'] == 0:
            users[message.from_user.id]['in_game'] = False
            users[message.from_user.id]['total_games'] += 1
            await message.answer(
                '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å '
                '–ø–æ–ø—ã—Ç–æ–∫. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(\n\n–ú–æ–µ —á–∏—Å–ª–æ '
                f'–±—ã–ª–æ {user["secret_number"]}\n\n–î–∞–≤–∞–π—Ç–µ '
                '—Å—ã–≥—Ä–∞–µ–º –µ—â–µ?'
            )
    else:
        await message.answer('–ú—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–µ–º. –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å?')

@dp.message(IsAdmin(admins_id),Command(commands=['off']))
async def off_bot(message: Message, status: int):
    if status == 1:
        print('Exiting by admins request from telegram')
        exit()
    else:
        await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞, –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')

@dp.message(Command(commands=['test']))
async def test_us(message: Message):
     print(users)

@dp.message(Command(commands=['exit']))
async def user_exit(message: Message):
    if message.from_user.id not in users:
        await message.answer('–¢—ã –µ—â–µ –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å —á—Ç–æ–±—ã –≤—ã—Ö–æ–¥–∏—Ç—å(')
    else:
        del users[message.from_user.id]
        await message.answer('–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ ‚úã')

@dp.message()
async def process_other_answers(message: Message):
    if users[message.from_user.id]['in_game']:
        await message.answer(
            '–ú—ã –∂–µ —Å–µ–π—á–∞—Å —Å –≤–∞–º–∏ –∏–≥—Ä–∞–µ–º. '
            '–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 100'
        )
    else:
        await message.answer(
            '–Ø –¥–æ–≤–æ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –±–æ—Ç, –¥–∞–≤–∞–π—Ç–µ '
            '–ø—Ä–æ—Å—Ç–æ —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?'
        )

if __name__ == "__main__":
    dp.run_polling(bot)
